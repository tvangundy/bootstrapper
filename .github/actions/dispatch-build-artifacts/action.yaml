name: 'Dispatch Build Artifacts'
description: 'Dispatches the build artifacts workflow'
inputs:
  release:
    description: 'Release Branch: [release-latest, release-x.y.z]'
    required: false
    default: 'release-latest'
  target_repo_owner:
    description: 'Repository Owner'
    required: true
  target_repo_name:
    description: 'Repository Name'
    required: true
  test_repo_owner:
    description: 'Test Repository Owner'
    required: true
  test_repo_name:
    description: 'Test Repository Name'
    required: true
  token:
    description: 'GitHub Token'
    required: true

permissions:
  contents: read

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print Parameters
      run: |
        echo "----------------------------------------"
        echo "Build Artifacts Parameters"
        echo "----------------------------------------"
        echo "Repo Owner: ${{ inputs.target_repo_owner }}"
        echo "Repo Name: ${{ inputs.target_repo_name }}"
        echo "Test Repo Owner: ${{ inputs.test_repo_owner }}"
        echo "Test Repo Name: ${{ inputs.test_repo_name }}"
        echo "Release: ${{ inputs.release }}"
        echo "----------------------------------------"
      shell: bash

    - name: Validate Release Input
      id: validate_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            const releaseInput = '${{ inputs.release }}';
            const validFormat = /^(release-latest|release-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$/;

            if (!validFormat.test(releaseInput)) {
              console.log("Release input:", releaseInput);
              throw new Error("Invalid release input. Please provide 'release-latest' or a version in the format 'release-x.y.z', 'v0.1.0', or '0.1.0'.");
            }
            console.log("Validated release input value:", releaseInput);
            core.setOutput('validated', 'true');
          } catch (error) {
            core.setFailed(`Release validation failed: ${error.message}`);
            throw error;
          }

    - name: Determine Release Branch
      id: determine_release
      uses: ./.github/actions/determine-release-branch
      with:
        version: ${{ inputs.version }}
        release: ${{ inputs.release }}
        repo_owner: ${{ inputs.target_repo_owner }}
        repo_name: ${{ inputs.target_repo_name }}
        token: ${{ inputs.token }}

    - name: Display Release Info
      uses: actions/github-script@v7
      with:
        script: |
          const releaseBranch = '${{ steps.determine_release.outputs.release_branch }}';
          const releaseNumber = '${{ steps.determine_release.outputs.release_number }}';
          const version = '${{ steps.determine_release.outputs.version }}';
          
          console.log('----------------------------------------');
          console.log('Release Information');
          console.log('----------------------------------------');
          console.log(`Release Branch: ${releaseBranch}`);
          console.log(`Release Number: ${releaseNumber}`);
          console.log(`Version: ${version}`);
          console.log('----------------------------------------');

    - name: Dispatch Build Artifacts Workflow
      id: dispatch_workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            console.log('Dispatching Build Artifacts Workflow');
            
            const releaseInfo = {
              releaseBranch: process.env.RELEASE_BRANCH || '${{ steps.determine_release.outputs.release_branch }}',
              releaseNumber: process.env.RELEASE_NUMBER || '${{ steps.determine_release.outputs.release_number }}',
              version: process.env.VERSION || '${{ steps.determine_release.outputs.version }}'
            };
            
            console.log('Using release information:');
            console.log(`- Release Branch: ${releaseInfo.releaseBranch}`);
            console.log(`- Release Number: ${releaseInfo.releaseNumber}`);
            console.log(`- Version: ${releaseInfo.version}`);

            // Create workflow_dispatch event
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: '${{ inputs.test_repo_owner }}',
              repo: '${{ inputs.test_repo_name }}',
              workflow_id: 'build-artifacts.yaml',
              ref: 'main',
              inputs: {
                repo_owner: '${{ inputs.target_repo_owner }}',
                repo_name: '${{ inputs.target_repo_name }}',
                release: releaseInfo.releaseBranch,
                token: '${{ inputs.token }}'
              }
            });
            
            console.log("Successfully dispatched build artifacts workflow");
            
            // Store the timestamp for finding the run later
            const dispatchTime = new Date().toISOString();
            core.exportVariable('DISPATCH_TIME', dispatchTime);
            core.setOutput('dispatch_time', dispatchTime);
            
          } catch (error) {
            console.error("Error dispatching workflow:", error.message);
            core.setFailed(`Failed to dispatch workflow: ${error.message}`);
            throw error;
          }

    - name: List Available Workflows
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: '${{ inputs.target_repo_owner }}',
              repo: '${{ inputs.target_repo_name }}'
            });
            console.log("Available Workflows:");
            workflows.data.workflows.forEach(wf => {
              console.log(`- ${wf.name} (ID: ${wf.id}): ${wf.path}`);
            });
          } catch (error) {
            console.error("Error listing workflows:", error.message);
            // Don't fail the workflow if this step fails
            console.log("Continuing despite error listing workflows");
          }
  
    - name: Wait for Workflow Completion
      id: wait_for_workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            // Get the dispatch time from previous step
            const dispatchTime = process.env.DISPATCH_TIME;
            const dispatchTimestamp = new Date(dispatchTime).getTime();
            
            console.log(`Dispatch time: ${dispatchTime}`);
            
            async function waitForLatestWorkflowRun(owner, repo, workflowId, targetBranch) {
              console.log(`Waiting for workflow run in ${owner}/${repo}`);
              console.log(`Workflow ID: ${workflowId}, Branch: ${targetBranch}`);
              console.log(`Looking for runs created after dispatch time: ${dispatchTime}`);
              
              // Wait 10 seconds initially to ensure the workflow has had time to start
              console.log('Waiting 10 seconds before checking for workflow runs...');
              await new Promise(resolve => setTimeout(resolve, 10000));
              
              // List all running workflows first
              const allRuns = await github.rest.actions.listWorkflowRuns({
                owner: owner,
                repo: repo,
                workflow_id: workflowId,
                per_page: 10
              });
              
              console.log(`Found ${allRuns.data.workflow_runs.length} total workflow runs for this workflow`);
              allRuns.data.workflow_runs.forEach((run, index) => {
                const runTime = new Date(run.created_at).getTime();
                const timeDiff = (runTime - dispatchTimestamp) / 1000;
                console.log(`Run ${index+1}: ID=${run.id}, Created=${run.created_at}, Status=${run.status}, Time diff=${timeDiff}s`);
              });
              
              for (let i = 0; i < 30; i++) {
                console.log(`Check attempt ${i+1}/30`);
                
                // Get all workflow runs for the workflow
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: owner,
                  repo: repo,
                  workflow_id: workflowId,
                  per_page: 10
                });
                
                // Sort runs by creation time (newest first)
                const sortedRuns = runs.data.workflow_runs.sort((a, b) => 
                  new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
                );
                
                // Find the runs that were created after our dispatch
                // Add a 5-second buffer to account for potential timing issues
                const relevantRuns = sortedRuns.filter(run => {
                  const runTime = new Date(run.created_at).getTime();
                  return runTime >= (dispatchTimestamp - 5000);
                });
                
                if (relevantRuns.length > 0) {
                  // Get the most recent run
                  const latestRun = relevantRuns[0];
                  
                  console.log(`Found relevant workflow run: ID=${latestRun.id}, Created=${latestRun.created_at}, Status=${latestRun.status}`);
                  
                  // Check if it's already been completed
                  if (latestRun.status === 'completed') {
                    console.log(`Run ${latestRun.id} has completed with conclusion: ${latestRun.conclusion}`);
                    return {
                      id: latestRun.id,
                      conclusion: latestRun.conclusion,
                      url: latestRun.html_url
                    };
                  }
                  
                  // If it's in progress, provide status info
                  console.log(`Run ${latestRun.id} is still ${latestRun.status}, waiting...`);
                } else {
                  console.log(`No relevant workflow runs found yet, waiting...`);
                }
                
                // Wait 20 seconds before checking again
                await new Promise(resolve => setTimeout(resolve, 20000));
              }
              
              throw new Error('Timed out waiting for workflow run to complete');
            }
            
            // Get the dispatched workflow details
            const targetOwner = '${{ inputs.test_repo_owner }}';
            const targetRepo = '${{ inputs.test_repo_name }}';
            const workflowId = 'build-artifacts.yaml';
            
            // For dispatched workflows, we need to check the correct branch
            // If the inputs specify a different branch, use that
            const targetBranch = 'main';
            
            // Execute the wait function
            const result = await waitForLatestWorkflowRun(targetOwner, targetRepo, workflowId, targetBranch);
            
            // Log and set outputs for the workflow run result
            console.log(`Workflow run completed with conclusion: ${result.conclusion}`);
            console.log(`Workflow run URL: ${result.url}`);
            
            core.setOutput('workflow_conclusion', result.conclusion);
            core.setOutput('workflow_url', result.url);
            core.setOutput('workflow_run_id', result.id);
            
            // Fail the action if the dispatched workflow failed
            if (result.conclusion !== 'success') {
              core.setFailed(`Dispatched workflow completed with status: ${result.conclusion}. Check the run at ${result.url}`);
            }
          } catch (error) {
            console.error("Error waiting for workflow completion:", error.message);
            core.setFailed(`Error waiting for workflow completion: ${error.message}`);
            throw error;
          }
