name: 'Integration Test Prep'
description: 'Prepares the environment for integration tests by setting up configuration and runner information'

inputs:
  repo_owner:
    description: 'Repository owner for the target repository'
    required: true
  repo_name:
    description: 'Repository name for the target repository'
    required: true
  version:
    description: 'Version in semantic format (e.g., v1.0.0)'
    required: false
    default: ''
  release_branch:
    description: 'Release branch name (e.g., release-1.0.0)'
    required: false
    default: ''
  release_number:
    description: 'Release number (e.g., 1.0.0)'
    required: false
    default: ''
  windsor_test_config:
    description: 'Windsor test configuration filename (without path)'
    required: false
    default: 'ci-integration-tests.yaml'
  token:
    description: 'GitHub token for API authentication'
    required: true

outputs:
  PLATFORM_OS:
    description: 'Operating system platform detected for the current environment'
    value: ${{ steps.platform_detection.outputs.PLATFORM_OS }}
  RUNNER_LIST:
    description: 'JSON string containing the list of runners from the Windsor test config'
    value: ${{ steps.runner_list.outputs.RUNNER_LIST }}
  WINDSOR_TEST_CONFIG_PATH:
    description: 'Platform-specific path to the Windsor test configuration file'
    value: ${{ steps.config_path.outputs.WINDSOR_TEST_CONFIG_PATH }}

permissions:
  contents: read

runs:
  using: 'composite'

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine Platform Type
      id: platform_detection
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const os = require('os');
            const platform = os.platform();
            
            // Set both output and environment variable
            core.exportVariable('PLATFORM_OS', platform);
            core.setOutput('PLATFORM_OS', platform);
            
            console.log(`Detected platform: ${platform}`);
          } catch (error) {
            core.setFailed(`Failed to detect platform: ${error.message}`);
            throw error;
          }

    - name: Set Windsor Test Config Path
      id: config_path
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const platform = process.env.PLATFORM_OS;
            const windsorTestConfig = '${{ inputs.windsor_test_config }}';
            
            console.log(`Configuring for platform: ${platform}`);
            console.log(`Input config file: ${windsorTestConfig}`);

            // Determine platform-specific path separator
            let windsorTestConfigPath;
            if (platform === 'win32') {
              windsorTestConfigPath = `tests\\configs\\${windsorTestConfig}`;
              console.log("Using Windows path format");
            } else {
              windsorTestConfigPath = `tests/configs/${windsorTestConfig}`;
              console.log("Using UNIX path format");
            }
            
            // Set both output and environment variable (uppercase for env var)
            core.exportVariable('WINDSOR_TEST_CONFIG_PATH', windsorTestConfigPath);
            core.setOutput('WINDSOR_TEST_CONFIG_PATH', windsorTestConfigPath);
            
            console.log(`Windsor Test Config Path: ${windsorTestConfigPath}`);
          } catch (error) {
            core.setFailed(`Failed to set Windsor test config path: ${error.message}`);
            throw error;
          }

    - name: Build Runner List
      id: runner_list
      uses: ./.github/actions/build-runner-list
      with:
        config_file_path: '${{ env.WINDSOR_TEST_CONFIG_PATH }}'

    - name: Validate Outputs
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Check that runner list is valid JSON
            const runnerList = process.env.RUNNER_LIST;
            if (!runnerList) {
              throw new Error('RUNNER_LIST is empty or undefined');
            }
            
            try {
              const parsedRunners = JSON.parse(runnerList);
              if (!Array.isArray(parsedRunners) || parsedRunners.length === 0) {
                throw new Error('RUNNER_LIST is not a valid array or is empty');
              }
              console.log(`Validated runner list: ${parsedRunners.length} runners found`);
            } catch (parseError) {
              throw new Error(`RUNNER_LIST is not valid JSON: ${parseError.message}`);
            }
            
            // Check that platform OS is set
            const platformOs = process.env.PLATFORM_OS;
            if (!platformOs) {
              throw new Error('PLATFORM_OS is empty or undefined');
            }
            console.log(`Validated platform OS: ${platformOs}`);
            
            // Check that Windsor test config path is set
            const windsorTestConfigPath = process.env.WINDSOR_TEST_CONFIG_PATH;
            if (!windsorTestConfigPath) {
              throw new Error('WINDSOR_TEST_CONFIG_PATH is empty or undefined');
            }
            console.log(`Validated Windsor test config path: ${windsorTestConfigPath}`);
          } catch (error) {
            core.setFailed(`Output validation failed: ${error.message}`);
            throw error;
          }

    - name: Print Action Outputs
      run: |
        echo "Integration Test Prep Outputs"
        echo "----------------------------------------"
        echo "RUNNER_LIST: ${{ steps.runner_list.outputs.RUNNER_LIST }}"
        echo "PLATFORM_OS: ${{ steps.platform_detection.outputs.PLATFORM_OS }}"
        echo "WINDSOR_TEST_CONFIG_PATH: ${{ steps.config_path.outputs.WINDSOR_TEST_CONFIG_PATH }}"
        echo "----------------------------------------"
      shell: bash
