name: 'Build Runner List'
description: 'Extracts runner information from Windsor test configuration file and makes it available for workflows'

inputs:
  config_file_path:
    description: 'Path to Windsor test configuration file (relative to workspace root)'
    required: false
    default: 'tests/configs/ci-integration-tests.yaml'

permissions:
  contents: read

runs:
  using: 'composite'

  steps:
    - name: Set up Node.js
      uses: actions/setup-node@7c12f8017d5436eb855f1ed4399f037a36fbd9e8 # v2
      with:
        node-version: '16'  # Use a specific Node.js version

    - name: Install Dependencies
      run: npm install js-yaml
      shell: bash

    - name: Build Runner List
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const yaml = require('js-yaml');

          try {
            // Load the YAML configuration file
            const configFilePath = '${{ inputs.config_file_path }}';
            console.log(`Processing Windsor Test Config: ${configFilePath}`);
            
            const configPath = path.join(process.env.GITHUB_WORKSPACE, configFilePath);
            
            if (!fs.existsSync(configPath)) {
              throw new Error(`Configuration file not found: ${configPath}`);
            }
            
            const configFile = fs.readFileSync(configPath, 'utf8');
            const config = yaml.load(configFile);

            // Extract runners list
            const runners = config.runners;
            if (!runners || !Array.isArray(runners) || runners.length === 0) {
              throw new Error(`No valid runners found in ${configFilePath}`);
            }

            // Prepare runner list with required properties
            const runnerList = runners.map(runner => {
              if (!runner.os || !runner.label) {
                console.warn(`Warning: Runner missing required fields: ${JSON.stringify(runner)}`);
              }
              
              return {
                os: runner.os || '',
                label: runner.label || '',
                arch: runner.arch || '',
                docker_host: runner.docker_host || ''
              };
            });

            // Convert runner list to JSON string
            const runnerListJson = JSON.stringify(runnerList);

            // Set the runner list as an environment variable (following uppercase convention)
            core.exportVariable('RUNNER_LIST', runnerListJson);
            console.log(`Successfully extracted ${runnerList.length} runners from config`);
            
            // Log the runners (first 2)
            if (runnerList.length > 0) {
              console.log(`${JSON.stringify(runnerList.slice(0, 2))}`);
            }
          } catch (error) {
            core.setFailed(`Error building runner list: ${error.message}`);
            throw error;
          }
