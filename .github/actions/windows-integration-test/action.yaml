name: 'Windows Integration Test'
description: 'Runs integration tests for Windows environment against Windsor CLI'

inputs:
  windsor_up:
    description: 'Whether to run Windsor Up before tests (true/false)'
    required: false
    type: boolean
    default: false
  version:
    description: 'Version in semantic format (e.g., v1.0.0)'
    required: false
    default: ''
  release_branch:
    description: 'Release branch name (e.g., release-1.0.0, release-latest)'
    required: false
    default: ''
  release_number:
    description: 'Release number (e.g., 1.0.0)'
    required: false
    default: ''
  windsor_test_config:
    description: 'Windsor test configuration file'
    required: false
    default: 'tests/configs/ci-integration-tests.yaml'
  docker_host:
    description: 'Docker host address for remote Docker operations'
    required: false
    default: ''

outputs:
  test_status:
    description: 'Status of the integration tests (success/failure)'
    value: ${{ steps.test_results.outputs.status }}

permissions:
  contents: read

runs:
  using: 'composite'

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print Test Parameters
      run: |
        Write-Host "Integration Test Parameters"
        Write-Host "----------------------------------------"
        Write-Host "Windsor Up: ${{ inputs.windsor_up }}"
        Write-Host "Version: ${{ inputs.version }}"
        Write-Host "Release Branch: ${{ inputs.release_branch }}"
        Write-Host "Release Number: ${{ inputs.release_number }}"
        Write-Host "Windsor Test Config: ${{ inputs.windsor_test_config }}"
        Write-Host "Docker Host: ${{ inputs.docker_host }}"
        Write-Host "----------------------------------------"
      shell: powershell
      
    - name: Install Aqua on Windows
      run: |
        $url = "https://github.com/aquaproj/aqua/releases/download/v2.48.2-0/aqua_windows_amd64.zip"
        $output = "aqua_windows_amd64.zip"
        $installPath = "$env:USERPROFILE\\aqua"
        
        # Remove existing directory if it exists
        if (Test-Path $installPath) {
          Remove-Item -Recurse -Force $installPath
        }
        
        Invoke-WebRequest -Uri $url -OutFile $output
        Expand-Archive -Path $output -DestinationPath $installPath -Force
        
        # Add the install path to the PATH environment variable
        "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Set-Item Env:Path "$Env:LOCALAPPDATA\aquaproj-aqua\bin;$Env:Path"
        "$Env:LOCALAPPDATA\aquaproj-aqua\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Create custom aqua config without problematic packages for Windows
        Write-Host "Creating custom Aqua config file for Windows..."
        
        $configLines = @(
          "# Custom aqua config for Windows without problematic packages",
          "registries:",
          "- type: standard",
          "  ref: v4.87.0",
          "packages:",
          "- name: hashicorp/terraform@v1.11.4",
          "- name: kubernetes/kubectl@v1.32.3",
          "- name: go-task/task@v3.42.1",
          "- name: golang/go@go1.24.2",
          "- name: docker/cli@v27.4.1",
          "- name: docker/compose@v2.34.0",
          "- name: helm/helm@v3.17.3"
        )
        
        # Backup original aqua.yaml if exists
        if (Test-Path aqua.yaml) {
            Copy-Item -Path aqua.yaml -Destination aqua.yaml.bak -Force
        }
        
        # Save custom config
        $configLines | Out-File -FilePath aqua.yaml -Encoding utf8
        
        # Install with custom config
        Write-Host "Installing Aqua packages with custom config..."
        try {
            aqua install --only-link
            Write-Host "Successfully installed packages"
        } catch {
            Write-Host "Error installing packages: $_"
            Write-Host "Continuing with tests despite installation errors..."
            # Don't fail - we want to continue with tests
        }
        
        # Restore original config if it existed
        if (Test-Path aqua.yaml.bak) {
            Move-Item -Path aqua.yaml.bak -Destination aqua.yaml -Force
        }
      shell: powershell

    - name: Install YQ on Windows
      run: |
        Write-Host "Installing yq on Windows..."
        $yqVersion = "v4.35.1"
        $yqUrl = "https://github.com/mikefarah/yq/releases/download/${yqVersion}/yq_windows_amd64.exe"
        
        # Create bin directory in GitHub workspace to store yq
        $binDir = Join-Path $env:GITHUB_WORKSPACE "bin"
        New-Item -Path $binDir -ItemType Directory -Force | Out-Null
        $yqPath = Join-Path $binDir "yq.exe"
        
        # Download yq
        Write-Host "Downloading yq from $yqUrl to $yqPath"
        Invoke-WebRequest -Uri $yqUrl -OutFile $yqPath
        
        # Add bin directory to PATH
        Write-Host "Adding $binDir to PATH"
        $env:PATH = "$binDir;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
        
        # Add to GITHUB_PATH for subsequent steps
        Write-Host "$binDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify yq installation
        try {
            $yqVersion = (& $yqPath --version) 2>&1
            Write-Host "Successfully installed yq: $yqVersion"
        }
        catch {
            Write-Host "Error verifying yq installation: $_"
            exit 1
        }
      shell: powershell

    - name: Print Aqua Path
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            let aquaPathCommand = platform === 'win32' ? 'where aqua' : 'which aqua';

            console.log(`Checking Aqua path on ${platform}...`);
            const aquaPath = execSync(aquaPathCommand, { encoding: 'utf-8' }).trim();
            console.log(`Aqua path: ${aquaPath}`);
          } catch (error) {
            console.error('Error getting Aqua path:', error.message);
            // Don't exit the process, just log the error
            console.log('Continuing despite Aqua path issues...');
          }

    - name: Install Tools
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      env:
        AQUA_DISABLE_COSIGN: true
        AQUA_DISABLE_SLSA: true
        AQUA_LOG_LEVEL: debug
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');
          const fs = require('fs');

          try {
            const platform = os.platform();
            console.log(`Detected platform: ${platform}`);

            if (platform === 'linux' || platform === 'darwin' || platform === 'win32') {
              console.log('Installing tools using Aqua...');
              
              // Create a temporary aqua.yaml file with minimal, safe packages
              const tempAquaConfig = `
              # Minimal aqua config - only essential packages
              registries:
              - type: standard
                ref: v4.87.0
              packages:
              - name: hashicorp/terraform@v1.11.4
              - name: kubernetes/kubectl@v1.32.3
              - name: go-task/task@v3.42.1
              - name: golang/go@go1.24.2
              - name: docker/cli@v27.4.1
              - name: docker/compose@v2.34.0
              - name: helm/helm@v3.17.3
              # Skipped problematic packages:
              # - name: fluxcd/flux2@v2.5.1
              # - name: hashicorp/vault@v1.19.1
              # - name: derailed/k9s@v0.50.2
              # - name: 1password/cli@v2.30.3
              # - name: siderolabs/talos@v1.9.5
              # - name: siderolabs/omni/omnictl@v0.48.0
              # - name: siderolabs/omni/omni@v0.48.0
              # - name: abiosoft/colima@v0.8.1
              # - name: lima-vm/lima@v1.0.7
              # - name: aws/aws-cli@2.26.0
              # - name: getsops/sops@v3.10.1
              `;
              
              // Backup original aqua.yaml if it exists
              const aquaConfigExists = fs.existsSync('aqua.yaml');
              let originalConfig = '';
              if (aquaConfigExists) {
                originalConfig = fs.readFileSync('aqua.yaml', 'utf8');
                fs.renameSync('aqua.yaml', 'aqua.yaml.bak');
              }
              
              try {
                // Create temp config with minimal tools
                fs.writeFileSync('aqua.yaml', tempAquaConfig);
                
                // Set environment variables to disable verification
                process.env.AQUA_DISABLE_COSIGN = 'true';
                process.env.AQUA_DISABLE_SLSA = 'true';
                process.env.AQUA_DISABLE_VERIFY = 'true';
                
                console.log('Installing with minimal config...');
                execSync('aqua install --only-link', { stdio: 'inherit' });
                console.log('Tools installed successfully with minimal configuration.');
              } catch (error) {
                console.log('Error installing tools: ' + error.message);
                console.log('Continuing with tests despite tool installation issues...');
                // Don't fail the workflow - continue with tests
              } finally {
                // Restore original aqua.yaml
                if (aquaConfigExists) {
                  fs.writeFileSync('aqua.yaml', originalConfig);
                } else {
                  fs.unlinkSync('aqua.yaml');
                }
              }
            } else {
              console.log('Tool installation is not supported on this platform.');
            }
          } catch (error) {
            console.error('Error installing tools:', error.message);
            // Don't fail the workflow - continue with tests
            console.log('Continuing with tests despite tool issues...');
          }

    - name: Set DOCKER_HOST Environment Variable
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            const dockerHost = '${{ inputs.docker_host }}';

            if (dockerHost === '') {
              console.log('dockerHost is empty. DOCKER_HOST will not be set.');
            } else {
              console.log(`Setting DOCKER_HOST for platform: ${platform}`);
              if (platform === 'win32') {
                execSync(`echo "DOCKER_HOST=${dockerHost}" >> $env:GITHUB_ENV`, { stdio: 'inherit', shell: 'powershell' });
              } else {
                execSync(`echo "DOCKER_HOST=${dockerHost}" >> $GITHUB_ENV`, { stdio: 'inherit' });
              }
              console.log(`DOCKER_HOST set to: ${dockerHost}`);
            }
          } catch (error) {
            console.error('Error setting DOCKER_HOST environment variable:', error.message);
            core.setFailed(`Failed to set DOCKER_HOST: ${error.message}`);
          }

    - name: Install Windsor CLI
      uses: windsorcli/action@5b792556ba81bdc6f8abad529343a47f883832cc # v0.3.0
      with:
        version: ${{ (inputs.release_number != '' && !startsWith(inputs.release_number, 'v')) && format('v{0}', inputs.release_number) || (inputs.release_number != '' && startsWith(inputs.release_number, 'v')) && inputs.release_number || inputs.version }}
        ref: ${{ inputs.release_branch }}
        context: "local"

    - name: Get Windsor Context
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            const windsorContext = execSync('windsor context get', { encoding: 'utf-8' });
            console.log(`Windsor context: ${windsorContext.trim()}`);
          } catch (error) {
            console.error('Error getting Windsor context:', error.message);
            core.setFailed(`Failed to get Windsor context: ${error.message}`);
          }

    - name: Windsor Check
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            const windsorCheckOutput = execSync('windsor check', { encoding: 'utf-8' });
            console.log(`Windsor check output: ${windsorCheckOutput.trim()}`);
          } catch (error) {
            console.error('Error running Windsor check:', error.message);
            core.setFailed(`Windsor check failed: ${error.message}`);
          }

    - name: Windsor Up
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            const isWindows = platform === 'win32';
            const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';

            console.log(`Detected platform: ${platform}`);

            if (${{ inputs.windsor_up }} === 'true') {
              console.log('Running Windsor Up...');
              const command = isWindows 
                ? `${windsorCommand} up --install --verbose`
                : `${windsorCommand} up --install --verbose`;
              execSync(command, { stdio: 'inherit' });
              console.log('Windsor Up completed successfully.');
            } else {
              console.log('Warning: WINDSOR_UP was not set, skipping Windsor Up');
            }
          } catch (error) {
            console.error('Error running Windsor Up:', error.message);
            core.setFailed(`Windsor Up failed: ${error.message}`);
          }

    - name: Check Pods Status
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');

          try {
            if (!${{ inputs.windsor_up }}) {
              console.log('WINDSOR_UP is not set to true. Skipping Check Pods Status.');
              return;
            }

            const platform = require('os').platform();
            const isWindows = platform === 'win32';
            const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';

            console.log(`Using Windsor CLI at: ${windsorCommand}`);

            // Fetch all pods in all namespaces in JSON format
            execSync(`${windsorCommand} exec -- kubectl get pods -A -o json > pods.json`, { stdio: 'inherit' });

            const podsJson = fs.readFileSync('pods.json', 'utf8');

            if (!podsJson) {
              console.error('No JSON output received. Please check if the Kubernetes cluster is accessible and has pods.');
              core.setFailed('No pod information received from cluster');
              return;
            }

            const pods = JSON.parse(podsJson);

            // Initialize counters
            let runningCount = 0;
            let nonRunningCount = 0;

            // Print header with proper spacing
            console.log(`${'NAMESPACE'.padEnd(20)} ${'POD_NAME'.padEnd(50)} ${'STATUS'.padEnd(10)}`);

            pods.items.forEach(item => {
              const namespace = item.metadata.namespace;
              const podName = item.metadata.name;
              const status = item.status.phase;

              console.log(`${namespace.padEnd(20)} ${podName.padEnd(50)} ${status.padEnd(10)}`);

              if (status !== 'Running') {
                nonRunningCount++;
              } else {
                runningCount++;
              }
            });

            console.log('\nSummary:');
            console.log(`Running pods: ${runningCount}`);
            console.log(`Non-running pods: ${nonRunningCount}`);

            if (nonRunningCount > 0) {
              console.warn(`Warning: There are ${nonRunningCount} pods that are not running.`);
            }
          } catch (error) {
            console.error('Error checking pod status:', error.message);
            core.setFailed(`Failed to check pod status: ${error.message}`);
          }

    - name: Run Windows Tests
      id: run_tests
      run: |
        $ErrorActionPreference = "Continue"
        
        Write-Host "========================================="
        Write-Host "          RUNNING WINDOWS TESTS          "
        Write-Host "========================================="
        
        $windowsTests = @(
            "tests\shell\windows-test.bat",
            "tests\shell\sample-test-win.bat"
        )
        
        $successCount = 0
        $failCount = 0
        
        foreach ($testPath in $windowsTests) {
            Write-Host "Running test: $testPath"
            
            # Execute the test
            cmd /c $testPath
            $exitCode = $LASTEXITCODE
            
            if ($exitCode -eq 0) {
                Write-Host "✅ Test passed successfully"
                $successCount++
            } else {
                Write-Host "❌ Test failed with exit code: $exitCode"
                $failCount++
            }
            
            Write-Host "-------------------"
        }
        
        Write-Host "========================================="
        Write-Host "           TEST EXECUTION SUMMARY        "
        Write-Host "========================================="
        Write-Host "Success: $successCount"
        Write-Host "Failed: $failCount"
        Write-Host "-------------------"
        
        # Export environment variables for other steps
        "TEST_SUCCESS_COUNT=$successCount" | Out-File -FilePath $env:GITHUB_ENV -Append
        "TEST_FAIL_COUNT=$failCount" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        if ($failCount -gt 0) {
            Write-Host "⚠️ One or more tests failed!"
            exit 1
        } else {
            Write-Host "✅ All tests completed successfully!"
        }
      shell: powershell

    - name: Set Test Results
      id: test_results
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Get test success/fail counts from environment variables
            const successCount = parseInt(process.env.TEST_SUCCESS_COUNT || '0');
            const failCount = parseInt(process.env.TEST_FAIL_COUNT || '0');
            
            // Output test summary
            console.log(`Test Results - Success: ${successCount}, Failed: ${failCount}`);
            
            // Set output status
            const status = failCount === 0 ? 'success' : 'failure';
            core.setOutput('status', status);
          } catch (error) {
            console.error('Error determining test results:', error.message);
            core.setOutput('status', 'failure');
          }

    - name: Test Windsor Version
      run: |
        windsor.exe version
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Windsor CLI is working properly"
        } else {
            Write-Host "❌ Failed to run windsor version command"
            exit 1
        }
      shell: powershell

    - name: Validate and Report Test Completion
      run: |
        echo "----------------------------------------"
        echo "Windows Integration Test Results"
        echo "----------------------------------------"
        echo "Status: ${{ steps.test_results.outputs.status }}"
        echo "Windsor Up Used: ${{ inputs.windsor_up }}"
        echo "----------------------------------------"
      shell: powershell 
