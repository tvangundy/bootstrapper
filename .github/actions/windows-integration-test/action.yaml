name: 'Windows Integration Test'
description: 'Runs integration tests for Windows environment against Windsor CLI'

inputs:
  windsor_up:
    description: 'Whether to run Windsor Up before tests (true/false)'
    required: false
    type: boolean
    default: false
  version:
    description: 'Version in semantic format (e.g., v1.0.0)'
    required: false
    default: ''
  release_branch:
    description: 'Release branch name (e.g., release-1.0.0, release-latest)'
    required: false
    default: ''
  release_number:
    description: 'Release number (e.g., 1.0.0)'
    required: false
    default: ''
  windsor_test_config:
    description: 'Windsor test configuration file'
    required: false
    default: 'tests/configs/ci-integration-tests.yaml'
  docker_host:
    description: 'Docker host address for remote Docker operations'
    required: false
    default: ''

outputs:
  test_status:
    description: 'Status of the integration tests (success/failure)'
    value: ${{ steps.test_results.outputs.status }}

permissions:
  contents: read

runs:
  using: 'composite'

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print Test Parameters
      run: |
        Write-Host "Integration Test Parameters"
        Write-Host "----------------------------------------"
        Write-Host "Windsor Up: ${{ inputs.windsor_up }}"
        Write-Host "Version: ${{ inputs.version }}"
        Write-Host "Release Branch: ${{ inputs.release_branch }}"
        Write-Host "Release Number: ${{ inputs.release_number }}"
        Write-Host "Windsor Test Config: ${{ inputs.windsor_test_config }}"
        Write-Host "Docker Host: ${{ inputs.docker_host }}"
        Write-Host "----------------------------------------"
      shell: powershell
      
    - name: Install Aqua on Windows
      run: |
        $url = "https://github.com/aquaproj/aqua/releases/download/v2.48.2-0/aqua_windows_amd64.zip"
        $output = "aqua_windows_amd64.zip"
        $installPath = "$env:USERPROFILE\\aqua"
        
        # Remove existing directory if it exists
        if (Test-Path $installPath) {
          Remove-Item -Recurse -Force $installPath
        }
        
        Write-Host "Downloading Aqua from $url..."
        Invoke-WebRequest -Uri $url -OutFile $output
        
        Write-Host "Extracting Aqua to $installPath..."
        Expand-Archive -Path $output -DestinationPath $installPath -Force
        
        # Add the install path to the PATH environment variable
        Write-Host "Adding Aqua to PATH..."
        "$installPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Set-Item Env:Path "$Env:LOCALAPPDATA\aquaproj-aqua\bin;$Env:Path"
        "$Env:LOCALAPPDATA\aquaproj-aqua\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Set environment variables to disable verification
        $env:AQUA_DISABLE_COSIGN = "true"
        $env:AQUA_DISABLE_SLSA = "true"
        
        # Install using existing aqua.yaml or default config
        Write-Host "Installing Aqua packages..."
        try {
            aqua install --only-link
            Write-Host "Successfully installed packages using Aqua"
        } catch {
            Write-Host "Error installing packages: $_"
            Write-Host "Continuing with tests despite installation errors..."
            # Don't fail - we want to continue with tests
        }
      shell: powershell

    - name: Install YQ on Windows
      run: |
        Write-Host "Installing yq on Windows..."
        $yqVersion = "v4.35.1"
        $yqUrl = "https://github.com/mikefarah/yq/releases/download/${yqVersion}/yq_windows_amd64.exe"
        
        # Create bin directory in GitHub workspace to store yq
        $binDir = Join-Path $env:GITHUB_WORKSPACE "bin"
        New-Item -Path $binDir -ItemType Directory -Force | Out-Null
        $yqPath = Join-Path $binDir "yq.exe"
        
        # Download yq
        Write-Host "Downloading yq from $yqUrl to $yqPath"
        Invoke-WebRequest -Uri $yqUrl -OutFile $yqPath
        
        # Add bin directory to PATH
        Write-Host "Adding $binDir to PATH"
        $env:PATH = "$binDir;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
        
        # Add to GITHUB_PATH for subsequent steps
        Write-Host "$binDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify yq installation
        try {
            $yqVersion = (& $yqPath --version) 2>&1
            Write-Host "Successfully installed yq: $yqVersion"
        }
        catch {
            Write-Host "Error verifying yq installation: $_"
            exit 1
        }
      shell: powershell

    - name: Print Aqua Path
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            let aquaPathCommand = platform === 'win32' ? 'where aqua' : 'which aqua';

            console.log(`Checking Aqua path on ${platform}...`);
            const aquaPath = execSync(aquaPathCommand, { encoding: 'utf-8' }).trim();
            console.log(`Aqua path: ${aquaPath}`);
          } catch (error) {
            console.error('Error getting Aqua path:', error.message);
            // Don't exit the process, just log the error
            console.log('Continuing despite Aqua path issues...');
          }

    - name: Install Tools
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      env:
        AQUA_DISABLE_COSIGN: true
        AQUA_DISABLE_SLSA: true
        AQUA_LOG_LEVEL: debug
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            console.log(`Detected platform: ${platform}`);

            if (platform === 'linux' || platform === 'darwin' || platform === 'win32') {
              console.log('Installing tools using Aqua...');
              
              // Set environment variables to disable verification
              process.env.AQUA_DISABLE_COSIGN = 'true';
              process.env.AQUA_DISABLE_SLSA = 'true';
              process.env.AQUA_DISABLE_VERIFY = 'true';
              
              console.log('Installing with Aqua...');
              execSync('aqua install --only-link', { stdio: 'inherit' });
              console.log('Tools installed successfully.');
            } else {
              console.log('Tool installation is not supported on this platform.');
            }
          } catch (error) {
            console.error('Error installing tools:', error.message);
            // Don't fail the workflow - continue with tests
            console.log('Continuing with tests despite tool issues...');
          }

    - name: Set DOCKER_HOST Environment Variable
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            const dockerHost = '${{ inputs.docker_host }}';

            if (dockerHost === '') {
              console.log('dockerHost is empty. DOCKER_HOST will not be set.');
            } else {
              console.log(`Setting DOCKER_HOST for platform: ${platform}`);
              if (platform === 'win32') {
                execSync(`echo "DOCKER_HOST=${dockerHost}" >> $env:GITHUB_ENV`, { stdio: 'inherit', shell: 'powershell' });
              } else {
                execSync(`echo "DOCKER_HOST=${dockerHost}" >> $GITHUB_ENV`, { stdio: 'inherit' });
              }
              console.log(`DOCKER_HOST set to: ${dockerHost}`);
            }
          } catch (error) {
            console.error('Error setting DOCKER_HOST environment variable:', error.message);
            core.setFailed(`Failed to set DOCKER_HOST: ${error.message}`);
          }

    - name: Install Windsor CLI
      uses: windsorcli/action@5b792556ba81bdc6f8abad529343a47f883832cc # v0.3.0
      with:
        version: ${{ (inputs.release_number != '' && !startsWith(inputs.release_number, 'v')) && format('v{0}', inputs.release_number) || (inputs.release_number != '' && startsWith(inputs.release_number, 'v')) && inputs.release_number || inputs.version }}
        ref: ${{ inputs.release_branch }}
        context: "local"

    - name: Get Windsor Context
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            const windsorContext = execSync('windsor context get', { encoding: 'utf-8' });
            console.log(`Windsor context: ${windsorContext.trim()}`);
          } catch (error) {
            console.error('Error getting Windsor context:', error.message);
            core.setFailed(`Failed to get Windsor context: ${error.message}`);
          }

    - name: Test Windsor Version
      run: |
        windsor.exe version
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Windsor CLI is working properly"
        } else {
            Write-Host "❌ Failed to run windsor version command"
            exit 1
        }
      shell: powershell

    - name: Windsor Check
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            const windsorCheckOutput = execSync('windsor check', { encoding: 'utf-8' });
            console.log(`Windsor check output: ${windsorCheckOutput.trim()}`);
          } catch (error) {
            console.error('Error running Windsor check:', error.message);
            core.setFailed(`Windsor check failed: ${error.message}`);
          }

    - name: Windsor Up
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            const isWindows = platform === 'win32';
            const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';

            console.log(`Detected platform: ${platform}`);

            if (${{ inputs.windsor_up }} === 'true') {
              console.log('Running Windsor Up...');
              const command = isWindows 
                ? `${windsorCommand} up --install --verbose`
                : `${windsorCommand} up --install --verbose`;
              execSync(command, { stdio: 'inherit' });
              console.log('Windsor Up completed successfully.');
            } else {
              console.log('Warning: WINDSOR_UP was not set, skipping Windsor Up');
            }
          } catch (error) {
            console.error('Error running Windsor Up:', error.message);
            core.setFailed(`Windsor Up failed: ${error.message}`);
          }

    - name: Check Pods Status
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');

          try {
            if (!${{ inputs.windsor_up }}) {
              console.log('WINDSOR_UP is not set to true. Skipping Check Pods Status.');
              return;
            }

            const platform = require('os').platform();
            const isWindows = platform === 'win32';
            const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';

            console.log(`Using Windsor CLI at: ${windsorCommand}`);

            // Fetch all pods in all namespaces in JSON format
            execSync(`${windsorCommand} exec -- kubectl get pods -A -o json > pods.json`, { stdio: 'inherit' });

            const podsJson = fs.readFileSync('pods.json', 'utf8');

            if (!podsJson) {
              console.error('No JSON output received. Please check if the Kubernetes cluster is accessible and has pods.');
              core.setFailed('No pod information received from cluster');
              return;
            }

            const pods = JSON.parse(podsJson);

            // Initialize counters
            let runningCount = 0;
            let nonRunningCount = 0;

            // Print header with proper spacing
            console.log(`${'NAMESPACE'.padEnd(20)} ${'POD_NAME'.padEnd(50)} ${'STATUS'.padEnd(10)}`);

            pods.items.forEach(item => {
              const namespace = item.metadata.namespace;
              const podName = item.metadata.name;
              const status = item.status.phase;

              console.log(`${namespace.padEnd(20)} ${podName.padEnd(50)} ${status.padEnd(10)}`);

              if (status !== 'Running') {
                nonRunningCount++;
              } else {
                runningCount++;
              }
            });

            console.log('\nSummary:');
            console.log(`Running pods: ${runningCount}`);
            console.log(`Non-running pods: ${nonRunningCount}`);

            if (nonRunningCount > 0) {
              console.warn(`Warning: There are ${nonRunningCount} pods that are not running.`);
            }
          } catch (error) {
            console.error('Error checking pod status:', error.message);
            core.setFailed(`Failed to check pod status: ${error.message}`);
          }

    - name: Run Windows Tests
      id: run_tests
      run: |
        $ErrorActionPreference = "Continue"
        
        Write-Host "========================================="
        Write-Host "          PREPARING TESTS                "
        Write-Host "========================================="
        
        # Set variables
        $testConfig = "${{ inputs.windsor_test_config }}"
        
        # Determine if the path is absolute or relative
        if ($testConfig.StartsWith("/") -or $testConfig.StartsWith("\") -or $testConfig -match "^[A-Za-z]:\\") {
          $testConfigPath = $testConfig
        } else {
          $testConfigPath = Join-Path $env:GITHUB_WORKSPACE $testConfig
        }
        
        Write-Host "Test configuration path: $testConfigPath"
        
        # Check if the test config file exists
        if (-not (Test-Path $testConfigPath)) {
          Write-Host "Error: Test configuration file not found: $testConfigPath"
          "TEST_SUCCESS_COUNT=0" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TEST_FAIL_COUNT=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          exit 0
        }
        
        # Install PowerShell-YAML module if not already installed
        if (-not (Get-Module -ListAvailable -Name PowerShell-YAML)) {
          Write-Host "Installing PowerShell-YAML module..."
          Install-Module -Name PowerShell-YAML -Force -Scope CurrentUser
        }
        
        # Import PowerShell-YAML module
        Import-Module PowerShell-YAML
        
        try {
          # Read and parse YAML file
          $yamlContent = Get-Content -Path $testConfigPath -Raw
          $config = ConvertFrom-Yaml $yamlContent
          
          # Check if tests-list section exists
          if (-not $config.ContainsKey('tests-list') -or $config.'tests-list'.Count -eq 0) {
            Write-Host "Error: No tests found in tests-list section"
            "TEST_SUCCESS_COUNT=0" | Out-File -FilePath $env:GITHUB_ENV -Append
            "TEST_FAIL_COUNT=1" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 0
          }
          
          $testsList = $config.'tests-list'
          Write-Host "Found $($testsList.Count) tests in configuration"
          
          Write-Host "========================================="
          Write-Host "              RUNNING TESTS              "
          Write-Host "========================================="
          
          # Set up success/failure counters
          $successCount = 0
          $failCount = 0
          
          # Loop through each test entry
          foreach ($test in $testsList) {
            $path = $test.path
            $type = if ($test.ContainsKey('type')) { $test.type } else { "shell" }
            $shell = if ($test.ContainsKey('shell')) { $test.shell } else { "cmd" }
            $osList = if ($test.ContainsKey('os')) { $test.os } else { @() }
            
            # Check if the path is empty
            if ([string]::IsNullOrEmpty($path)) {
              Write-Host "Error: Test missing path property"
              $failCount++
              continue
            }
            
            # Check if Windows is supported for the test
            if ($osList.Count -eq 0 -or $osList -contains "windows") {
              Write-Host "Running $type test: $path"
              
              # Use absolute path
              if ($path.StartsWith("/") -or $path.StartsWith("\") -or $path -match "^[A-Za-z]:\\") {
                $fullPath = $path
              } else {
                $fullPath = Join-Path $env:GITHUB_WORKSPACE $path
              }
              
              # Run the test based on type
              if ((Test-Path $fullPath -PathType Container) -and $type -eq "bats") {
                # Handle bats tests directory
                Write-Host "Error: Bats tests are not supported on Windows"
                $failCount++
                continue
              } elseif (Test-Path $fullPath -PathType Leaf) {
                # Regular file test
                Write-Host "Executing $shell test: $fullPath"
                
                # Print test file details for debugging
                Write-Host "Test file details:"
                Get-ChildItem $fullPath | Format-Table -Property Mode, LastWriteTime, Length, Name
                Write-Host "Test file content preview:"
                Get-Content $fullPath -Head 5
                Write-Host "-------------------"
                
                # Run the test based on shell type
                if ($shell -eq "powershell" -or $shell -eq "pwsh") {
                  Write-Host "Running PowerShell script..."
                  & powershell.exe -ExecutionPolicy Bypass -File $fullPath
                  $exitCode = $LASTEXITCODE
                } else {
                  # Default to cmd
                  Write-Host "Running batch script..."
                  & cmd.exe /c $fullPath
                  $exitCode = $LASTEXITCODE
                }
                
                Write-Host "Test exit code: $exitCode"
                
                if ($exitCode -ne 0) {
                  Write-Host "Error: Script execution failed with exit code $exitCode"
                  $failCount++
                  continue
                } else {
                  Write-Host "Test executed successfully"
                }
              } else {
                Write-Host "Error: Path is neither a valid file nor a directory: $fullPath"
                $failCount++
                continue
              }
              
              # If we got here, the test was successful
              $successCount++
              Write-Host "Test executed successfully"
            } else {
              Write-Host "Skipping $type test at $path (not applicable for Windows)"
            }
          }
          
          Write-Host "========================================="
          Write-Host "           TEST EXECUTION SUMMARY        "
          Write-Host "========================================="
          Write-Host "Success: $successCount"
          Write-Host "Failed: $failCount"
          Write-Host "Test details:"
          Write-Host "- Total tests attempted: $($successCount + $failCount)"
          
          # Export environment variables for other steps
          "TEST_SUCCESS_COUNT=$successCount" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TEST_FAIL_COUNT=$failCount" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          if ($failCount -gt 0) {
            Write-Host "⚠️ One or more tests failed! Check logs above for details."
            # Set non-zero exit code only when tests actually fail
            exit 1
          }
          
          Write-Host "✅ All tests completed successfully!"
        } catch {
          Write-Host "Error parsing or running tests: $_"
          Write-Host $_.Exception
          "TEST_SUCCESS_COUNT=0" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TEST_FAIL_COUNT=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          exit 1
        }
      shell: powershell

    - name: Set Test Results
      id: test_results
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Get test success/fail counts from environment variables
            const successCount = parseInt(process.env.TEST_SUCCESS_COUNT || '0');
            const failCount = parseInt(process.env.TEST_FAIL_COUNT || '0');
            
            // Output test summary
            console.log(`Test Results - Success: ${successCount}, Failed: ${failCount}`);
            
            // Set output status
            const status = failCount === 0 ? 'success' : 'failure';
            core.setOutput('status', status);
          } catch (error) {
            console.error('Error determining test results:', error.message);
            core.setOutput('status', 'failure');
          }

    - name: Windsor Down
      if: always() 
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            // Check if windsor_up is true using only process.env
            // GitHub will have set this env variable from the workflow input
            const windsorUpInput = '${{ inputs.windsor_up }}' === 'true';
            
            if (!windsorUpInput) {
              console.log('WINDSOR_UP is not set to true. Skipping Windsor Down.');
              process.exit(0);
            }

            const platform = os.platform();
            const isWindows = platform === 'win32';
            const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';

            console.log(`Detected platform: ${platform}`);
            console.log('Running Windsor Down...');

            // Execute the Windsor Down command
            execSync(`${windsorCommand} down --clean`, { stdio: 'inherit' });

            console.log('Windsor Down completed successfully.');
          } catch (error) {
            console.error('Error running Windsor Down:', error.message);
            process.exit(1);
          }

    - name: Docker Clean
      if: always()
      run: |
        $windsorUpInput = [bool]::Parse("${{ inputs.windsor_up }}")
        if (-not $windsorUpInput) {
          Write-Output 'WINDSOR_UP is not set to true. Skipping Docker Clean on Windows.'
          exit 0
        }

        $containers = docker ps -aq
        if ($containers) {
          Write-Output "Removing containers..."
          docker rm -f $containers
        } else {
          Write-Output "No containers to remove."
        }

        # Prune system, volumes, and networks
        Write-Output "Pruning Docker system, volumes, and networks..."
        docker system prune -a -f
        docker volume prune -f
        docker network prune -f
        docker system prune -a -f
      shell: powershell
  
    - name: Windsor Clean
      if: always() 
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          try {
            const workspace = process.env.GITHUB_WORKSPACE;

            if (workspace === '/') {
              console.error('Error: GITHUB_WORKSPACE is the root folder. Aborting cleanup.');
              process.exit(1);
            }

            if (!fs.existsSync(workspace) || !fs.lstatSync(workspace).isDirectory()) {
              console.error('Error: GITHUB_WORKSPACE is not a directory. Aborting cleanup.');
              process.exit(1);
            }

            const directoriesToRemove = [
              path.join(workspace, '.windsor'),
              path.join(workspace, 'terraform'),
              path.join(workspace, 'kustomize')
            ];

            const filesToRemove = [
              path.join(workspace, '.yamllint'),
              path.join(workspace, '.gitignore'),
              path.join(workspace, '.editorconfig')
            ];

            // Remove directories
            directoriesToRemove.forEach(dir => {
              if (fs.existsSync(dir)) {
                console.log(`Removing directory: ${dir}`);
                fs.rmSync(dir, { recursive: true, force: true });
              }
            });

            // Remove files
            filesToRemove.forEach(file => {
              if (fs.existsSync(file)) {
                console.log(`Removing file: ${file}`);
                fs.rmSync(file, { force: true });
              }
            });

            // Remove all files in the workspace
            fs.readdirSync(workspace).forEach(file => {
              const filePath = path.join(workspace, file);
              if (fs.lstatSync(filePath).isFile()) {
                console.log(`Removing file: ${filePath}`);
                fs.rmSync(filePath, { force: true });
              }
            });

          } catch (error) {
            console.error('Error during Windsor clean-up:', error.message);
            process.exit(1);
          }

    - name: Remove tools
      if: always() 
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            console.log('Removing tools with Aqua...');
            execSync('aqua rm --all', { stdio: 'inherit' });
            console.log('Tools removed successfully.');
          } catch (error) {
            console.error('Error removing tools:', error.message);
            process.exit(1);
          }
    
    - name: Check for Remaining Files
      if: always() 
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const os = require('os');

          try {
            const workspace = process.env.GITHUB_WORKSPACE;
            const platform = os.platform();
            console.log(`Checking for remaining files in the workspace on ${platform}...`);

            let remainingFiles = [];

            if (platform === 'win32') {
              // Windows: Use fs.readdirSync to list files
              remainingFiles = fs.readdirSync(workspace).filter(file => {
                const filePath = path.join(workspace, file);
                return fs.lstatSync(filePath).isFile();
              });
            } else {
              // Linux/macOS: Use fs.readdirSync to list files
              remainingFiles = fs.readdirSync(workspace).filter(file => {
                const filePath = path.join(workspace, file);
                return fs.lstatSync(filePath).isFile();
              });
            }

            if (remainingFiles.length > 0) {
              console.error('Error: Found files in the workspace that should be removed:');
              remainingFiles.forEach(file => console.log(file));
              process.exit(1);
            } else {
              console.log('No remaining files found in the workspace.');
            }
          } catch (error) {
            console.error('Error checking for remaining files:', error.message);
            process.exit(1);
          }

    - name: Validate and Report Test Completion
      run: |
        echo "----------------------------------------"
        echo "Windows Integration Test Results"
        echo "----------------------------------------"
        echo "Status: ${{ steps.test_results.outputs.status }}"
        echo "Windsor Up Used: ${{ inputs.windsor_up }}"
        echo "----------------------------------------"
      shell: powershell 
