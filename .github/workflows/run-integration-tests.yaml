name: 'Run Integration Tests'

on:
  workflow_dispatch:
    inputs:
      windsor_up:
        description: 'Windsor Up'
        required: false
        type: boolean
        default: false
      windsor_test_config:
        description: 'Windsor test configuration file'
        required: false
        default: 'ci-tests.yaml'
      release_branch:
        description: 'Release Branch (release-1.0.0 or 1.0.0)'
        required: false
        default: 'release-latest'
      release_number:
        description: 'Release Number (1.0.0)'
        required: false
        default: ''
      version:
        description: 'Version (e.g., v1.0.0, 1.0.0)'
        required: false
      target_repo_owner:
        description: 'Test Target Repository Owner'
        required: true
        default: 'windsorcli'
      target_repo_name:
        description: 'Test Target Repository Name'
        required: true
        default: 'cli'
        
permissions:
  contents: read

jobs:
  integration-test-prep:
    runs-on: ubuntu-latest
    outputs:
      UNIX_RUNNER_LIST: ${{ steps.unix_runner_prep.outputs.RUNNER_LIST }}
      PLATFORM_OS: ${{ steps.platform_detection.outputs.PLATFORM_OS }}
      WINDSOR_TEST_CONFIG_PATH: ${{ steps.config_path.outputs.WINDSOR_TEST_CONFIG_PATH }}
      VERSION: ${{ steps.set_release_info.outputs.VERSION }}
      RELEASE_BRANCH: ${{ steps.set_release_info.outputs.RELEASE_BRANCH }}
      RELEASE_NUMBER: ${{ steps.set_release_info.outputs.RELEASE_NUMBER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Print Out the inputs
        run: |
          echo "Integration Test Input Variables"
          echo "----------------------------------------"
          echo "Repo Owner: ${{ inputs.target_repo_owner }}"
          echo "Repo Name: ${{ inputs.target_repo_name }}"
          echo "Release Branch: ${{ inputs.release_branch }}"
          echo "Release Number: ${{ inputs.release_number }}"
          echo "Version: ${{ inputs.version }}"
          echo "Windsor Up: ${{ inputs.windsor_up }}"
          echo "Windsor Test Config: ${{ inputs.windsor_test_config }}"
          echo "----------------------------------------"

      - name: Determine Release Branch
        uses: ./.github/actions/determine-release-branch
        with:
          version: ${{ inputs.version }}
          release: ${{ inputs.release }}
          repo_owner: ${{ inputs.target_repo_owner }}
          repo_name: ${{ inputs.target_repo_name }}
          token: ${{ secrets.WINDSORCLI_RELEASE_TOKEN }}
    
      - name: Display Release Info
        run: |
          echo "----------------------------------------"
          echo "Release Information"
          echo "----------------------------------------"
          echo "Release Branch: ${{ env.RELEASE_BRANCH }}"
          echo "Release Number: ${{ env.RELEASE_NUMBER }}"
          echo "Version: ${{ env.VERSION }}"
          echo "----------------------------------------"
        shell: bash

      - name: Set Release Information
        id: set_release_info
        run: |
          echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          echo "RELEASE_BRANCH=${{ env.RELEASE_BRANCH }}" >> $GITHUB_OUTPUT
          echo "RELEASE_NUMBER=${{ env.RELEASE_NUMBER }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Determine Platform Type
        id: platform_detection
        run: |
          PLATFORM_OS=$(uname | tr '[:upper:]' '[:lower:]')
          echo "PLATFORM_OS=$PLATFORM_OS" >> $GITHUB_OUTPUT
          echo "Detected platform: $PLATFORM_OS"
        shell: bash

      - name: Set Windsor Test Config Path
        id: config_path
        run: |
          WINDSOR_TEST_CONFIG_PATH="tests/configs/${{ inputs.windsor_test_config }}"
          echo "WINDSOR_TEST_CONFIG_PATH=$WINDSOR_TEST_CONFIG_PATH" >> $GITHUB_OUTPUT
          echo "Windsor Test Config Path: $WINDSOR_TEST_CONFIG_PATH"
        shell: bash

      - name: Build Unix Runner List
        id: unix_runner_prep
        uses: ./.github/actions/build-unix-runner-list
        with:
          config_file_path: '${{ steps.config_path.outputs.WINDSOR_TEST_CONFIG_PATH }}'

      - name: Print Integration Test Prep Results
        run: |
          echo "Integration Test Prep Results"
          echo "----------------------------------------"
          echo "UNIX_RUNNER_LIST: ${{ steps.unix_runner_prep.outputs.RUNNER_LIST }}"
          echo "PLATFORM_OS: ${{ steps.platform_detection.outputs.PLATFORM_OS }}"
          echo "WINDSOR_TEST_CONFIG_PATH: ${{ steps.config_path.outputs.WINDSOR_TEST_CONFIG_PATH }}"
          echo "VERSION: ${{ steps.set_release_info.outputs.VERSION }}"
          echo "RELEASE_BRANCH: ${{ steps.set_release_info.outputs.RELEASE_BRANCH }}"
          echo "RELEASE_NUMBER: ${{ steps.set_release_info.outputs.RELEASE_NUMBER }}"
          echo "----------------------------------------"
        shell: bash

  unix-integration-tests:
    name: Unix Tests (Linux/macOS)
    needs: 
      - integration-test-prep
    strategy:
      fail-fast: false
      matrix:
        runner: ${{ fromJson(needs.integration-test-prep.outputs.UNIX_RUNNER_LIST) }}
            
    runs-on: ${{ matrix.runner.os }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print Job Input Values
        run: |
          echo "----------------------------------------"
          echo "Integration Test Inputs from Previous Job"
          echo "----------------------------------------"
          echo "Platform: ${{ matrix.runner.os }}"
          echo "Windsor Test Config: ${{ needs.integration-test-prep.outputs.WINDSOR_TEST_CONFIG_PATH }}"
          echo "Version: ${{ needs.integration-test-prep.outputs.VERSION }}"
          echo "Release Branch: ${{ needs.integration-test-prep.outputs.RELEASE_BRANCH }}"
          echo "Release Number: ${{ needs.integration-test-prep.outputs.RELEASE_NUMBER }}"
          echo "Runner Label: ${{ matrix.runner.label }}"
          echo "Docker Host: ${{ matrix.runner.docker_host }}"
          echo "----------------------------------------"
        shell: bash

      - name: Run Integration Test
        uses: ./.github/actions/integration-test
        with:
          windsor_up: ${{ inputs.windsor_up }}
          version: ${{ needs.integration-test-prep.outputs.VERSION }}
          release_branch: ${{ needs.integration-test-prep.outputs.RELEASE_BRANCH }}
          release_number: ${{ needs.integration-test-prep.outputs.RELEASE_NUMBER }}
          windsor_test_config: ${{ needs.integration-test-prep.outputs.WINDSOR_TEST_CONFIG_PATH }}
          docker_host: ${{ matrix.runner.docker_host }}
          platform: ${{ needs.integration-test-prep.outputs.PLATFORM_OS }}

  windows-integration-tests:
    name: Windows Tests
    needs: integration-test-prep
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          Write-Host "Setting up Windows test environment"
          $ErrorActionPreference = "Continue"
          
          # Create test directories
          New-Item -Path "tests\shell" -ItemType Directory -Force | Out-Null
          
          # Create Windows-specific test files
          $windowsTestFile = "tests\shell\windows-test.bat"
          $sampleTestFile = "tests\shell\sample-test-win.bat"
          
          # Create test file content with individual lines
          Set-Content -Path $windowsTestFile -Value "@echo off"
          Add-Content -Path $windowsTestFile -Value "echo Running Windsor Windows Test"
          Add-Content -Path $windowsTestFile -Value "echo Testing on Windows version:"
          Add-Content -Path $windowsTestFile -Value "ver"
          Add-Content -Path $windowsTestFile -Value "echo Test completed successfully!"
          Add-Content -Path $windowsTestFile -Value "exit /b 0"
          
          # Create second test file
          Set-Content -Path $sampleTestFile -Value "@echo off"
          Add-Content -Path $sampleTestFile -Value "echo Hello, World from Windows!"
          Add-Content -Path $sampleTestFile -Value "echo Testing Windsor on Windows"
          Add-Content -Path $sampleTestFile -Value "exit /b 0"
          
          Write-Host "Created test files:"
          Get-ChildItem -Path tests\shell -Recurse
        shell: powershell

      - name: Install Windsor CLI
        uses: windsorcli/action@5b792556ba81bdc6f8abad529343a47f883832cc # v0.3.0
        with:
          version: ${{ needs.integration-test-prep.outputs.VERSION != '' && needs.integration-test-prep.outputs.VERSION || 'latest' }}
          ref: ${{ needs.integration-test-prep.outputs.RELEASE_BRANCH }}
          context: "local"

      - name: Get Windsor Context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
  
            try {
              const windsorContext = execSync('windsor context get', { encoding: 'utf-8' });
              console.log(`Windsor context: ${windsorContext.trim()}`);
            } catch (error) {
              console.error('Error getting Windsor context:', error.message);
              core.setFailed(`Failed to get Windsor context: ${error.message}`);
            }
  
      - name: Windsor Check
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
  
            try {
              const windsorCheckOutput = execSync('windsor check', { encoding: 'utf-8' });
              console.log(`Windsor check output: ${windsorCheckOutput.trim()}`);
            } catch (error) {
              console.error('Error running Windsor check:', error.message);
              core.setFailed(`Windsor check failed: ${error.message}`);
            }
  
      - name: Windsor Up
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            const os = require('os');
  
            try {
              const platform = os.platform();
              const isWindows = platform === 'win32';
              const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';
  
              console.log(`Detected platform: ${platform}`);
  
              if (${{ inputs.windsor_up }} === 'true') {
                console.log('Running Windsor Up...');
                const command = isWindows 
                  ? `${windsorCommand} up --install --verbose`
                  : `${windsorCommand} up --install --verbose`;
                execSync(command, { stdio: 'inherit' });
                console.log('Windsor Up completed successfully.');
              } else {
                console.log('Warning: WINDSOR_UP was not set, skipping Windsor Up');
              }
            } catch (error) {
              console.error('Error running Windsor Up:', error.message);
              core.setFailed(`Windsor Up failed: ${error.message}`);
            }
  
      - name: Check Pods Status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
  
            try {
              if (!${{ inputs.windsor_up }}) {
                console.log('WINDSOR_UP is not set to true. Skipping Check Pods Status.');
                return;
              }
  
              const platform = require('os').platform();
              const isWindows = platform === 'win32';
              const windsorCommand = isWindows ? 'windsor.exe' : 'windsor';
  
              console.log(`Using Windsor CLI at: ${windsorCommand}`);
  
              // Fetch all pods in all namespaces in JSON format
              execSync(`${windsorCommand} exec -- kubectl get pods -A -o json > pods.json`, { stdio: 'inherit' });
  
              const podsJson = fs.readFileSync('pods.json', 'utf8');
  
              if (!podsJson) {
                console.error('No JSON output received. Please check if the Kubernetes cluster is accessible and has pods.');
                core.setFailed('No pod information received from cluster');
                return;
              }
  
              const pods = JSON.parse(podsJson);
  
              // Initialize counters
              let runningCount = 0;
              let nonRunningCount = 0;
  
              // Print header with proper spacing
              console.log(`${'NAMESPACE'.padEnd(20)} ${'POD_NAME'.padEnd(50)} ${'STATUS'.padEnd(10)}`);
  
              pods.items.forEach(item => {
                const namespace = item.metadata.namespace;
                const podName = item.metadata.name;
                const status = item.status.phase;
  
                console.log(`${namespace.padEnd(20)} ${podName.padEnd(50)} ${status.padEnd(10)}`);
  
                if (status !== 'Running') {
                  nonRunningCount++;
                } else {
                  runningCount++;
                }
              });
  
              console.log('\nSummary:');
              console.log(`Running pods: ${runningCount}`);
              console.log(`Non-running pods: ${nonRunningCount}`);
  
              if (nonRunningCount > 0) {
                console.warn(`Warning: There are ${nonRunningCount} pods that are not running.`);
              }
            } catch (error) {
              console.error('Error checking pod status:', error.message);
              core.setFailed(`Failed to check pod status: ${error.message}`);
            }
  
      - name: Test Windsor Version
        run: |
          windsor.exe version
          
          if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Windsor CLI is working properly"
          } else {
              Write-Host "❌ Failed to run windsor version command"
              exit 1
          }
        shell: powershell

      - name: Run Windows Tests
        run: |
          $ErrorActionPreference = "Continue"
          
          Write-Host "========================================="
          Write-Host "          RUNNING WINDOWS TESTS          "
          Write-Host "========================================="
          
          $windowsTests = @(
              "tests\shell\windows-test.bat",
              "tests\shell\sample-test-win.bat"
          )
          
          $successCount = 0
          $failCount = 0
          
          foreach ($testPath in $windowsTests) {
              Write-Host "Running test: $testPath"
              
              # Execute the test
              cmd /c $testPath
              $exitCode = $LASTEXITCODE
              
              if ($exitCode -eq 0) {
                  Write-Host "✅ Test passed successfully"
                  $successCount++
              } else {
                  Write-Host "❌ Test failed with exit code: $exitCode"
                  $failCount++
              }
              
              Write-Host "-------------------"
          }
          
          Write-Host "========================================="
          Write-Host "           TEST EXECUTION SUMMARY        "
          Write-Host "========================================="
          Write-Host "Success: $successCount"
          Write-Host "Failed: $failCount"
          Write-Host "-------------------"
          
          if ($failCount -gt 0) {
              Write-Host "⚠️ One or more tests failed!"
              exit 1
          } else {
              Write-Host "✅ All tests completed successfully!"
          }
        shell: powershell        
